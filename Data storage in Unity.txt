Games built in Unity can store data in several locations and formats, depending on the type of data and the platform. Here are the common methods:

PlayerPrefs:

Unity provides a simple way to store and access small amounts of data (like player preferences, scores, or settings) using the PlayerPrefs class. Data is stored in the registry on Windows, in plist files on macOS, and in key-value pairs on mobile devices.
Local Files:

For more extensive data, such as game saves or configuration files, Unity can read and write to local files. This can include text files, JSON, XML, or binary formats, stored in application-specific folders (like Application.persistentDataPath).
Databases:

For complex data storage, especially in multiplayer or online games, developers may implement a database system. This can be a remote SQL database or a NoSQL solution like Firebase, allowing for structured storage and retrieval of data.
Cloud Storage:

Unity can integrate with cloud services to store data remotely, allowing for features like player progress synchronization across devices. Services like PlayFab or Unity's own Cloud Save can be used.
ScriptableObjects:

For in-game data that doesn't change at runtime, developers can use ScriptableObject instances to store data within the project. These can be easily edited in the Unity Editor and can hold various types of data.
Each method has its advantages, and the choice often depends on the specific requirements of the game, such as the volume of data, the need for persistence, and whether data needs to be shared across platforms or users.